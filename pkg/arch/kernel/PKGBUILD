# Maintainer: Maximilian Luz <m@mxnluz.io>
# Maintainer: BlaÅ¾ Hrastnik <blaz@mxxn.io>
# Maintainer: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>

pkgbase=linux-surface
pkgver=6.2.5.arch1
pkgrel=1
pkgdesc='Linux'
_shortver=${pkgver%.*}
_fullver=${pkgver%.*}-${pkgver##*.}
_srctag=v${_fullver}
url="https://github.com/archlinux/linux/commits/$_srctag"
arch=(x86_64)
license=(GPL2)
makedepends=(
  bc libelf cpio perl tar xz
  python
  # we don't need `pahole` as deps because we disable `CONFIG_DEBUG_INFO`
  # ignoring deps for docs because we don't build docs package
  git
)
optdepends=('iptsd: Touchscreen support'
            'linux-firmware: Firmware files for Linux'
            'linux-firmware-marvell: Firmware files for Marvell WiFi / Bluetooth')
options=('!strip')
_srcname=archlinux-linux
source=(
  "$_srcname::git+https://github.com/archlinux/linux#tag=$_srctag"
  config         # the main kernel config file

  surface.config # surface specific options
  arch.config # config changes for linux-surface kernel
  0001-surface3-oemb.patch
  0002-mwifiex.patch
  0003-ath10k.patch
  0004-ipts.patch
  0005-ithc.patch
  0006-surface-sam.patch
  0007-surface-sam-over-hid.patch
  0008-surface-button.patch
  0009-surface-typecover.patch
  0010-surface-shutdown.patch
  0011-surface-gpe.patch
  0012-cameras.patch
  0013-amd-gpio.patch
  0014-rtc.patch
  0015-intel-thread-director.patch
)
validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
  'A2FF3A36AAA56654109064AB19802F8B0D70FC30'  # Jan Alexander Steffens (heftig)
)
sha256sums=('SKIP'
            'f35bb39db7324a45e78e6c75c1a60f117fea3f7d0df9f4a32bed411751d6ffea'
            'e5f71d99937a5d52cd1c3b2477372f84480b47c306109f13ab2cc410def5a91c'
            '22902a3ac84f3ae0a8b442a99c63f81ce8f2dfd678c7c66420fffd52110f11d9'
            '510f07b8a8106e31968c6b3803812bdaf92425503cbf8acd25c646165cbc2633'
            'e858a3c979ddaf03f36e8c0f99cd08ff7558df0cf43b15ca6fcb8713766c8489'
            '66b099a69614cd1ce75147e612bd35e231e07fff34649c5b3d19166b127f290b'
            '84d3894488f4a23693a10bf9751ca1ef10153b49e1a1d0fef991d9b5cb3b21e8'
            '0e7059095389248023c1fdc2ebc23b99d47093f3d57d7bbac9447cb39f7b3562'
            'b257b161f2c51f500e9129c1d37cdcc468c19b5032fdaa3278f71fd1abd41922'
            '1bbcf712c04cbbceb23ddc9bd6f9c50e1becfa9b51b04d566b56efdb28102811'
            'ef07ca5316ff34544fd97e4c0faa25cb79c135cbda7a885a6bbebe41fe2ee4a4'
            '60a422c966dbc7c33c5169e7272f8c572ef56cd4a2dc28ee94b2bacda00ff436'
            'd05b6f497ee1a4a83829ea9f550ed2c03b92eb5deb245f9c7587571350d6b18a'
            '0445d4464a845f0b6f105f685c91c20cdc16d2d7dd05a9bc5b99514d1904e438'
            '01f885bd960c233b2be13417af29df2dbfd32d7325c44e22b24f73e4a7fa0fe3'
            '717cd889782d6da3c1e114dbfa3f71f00022fa13cf39981c648eaa5be924deac'
            '7dac1f03e694df2013dfb5510a5673b129cabf087526a7b5cf5bb397740a3e58'
            '7b9ce97bb27ef1988e7cfce152e75e3ce39ba6776194d9ab283ab69f83439217')


export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

# optional certificate and key for secure boot signing
_mok_crt="$PWD/MOK.crt"
_mok_key="$PWD/MOK.key"

prepare() {
  cd $_srcname

  echo "Setting version..."
  scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  # setup git
  git config --local user.email "surfacebot@users.noreply.github.com"
  git config --local user.name "surfacebot"

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    git am -3 "../$src"
  done

  echo "Setting config..."
  # cp ../config .config
  # merge the two configs together
  ./scripts/kconfig/merge_config.sh -m ../config ../surface.config ../arch.config
  make olddefconfig

  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd $_srcname
  make all
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(coreutils kmod initramfs)
  optdepends=('wireless-regdb: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE linux=${_shortver})
  replaces=(virtualbox-guest-modules-arch wireguard-arch)

  cd $_srcname
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"
  local image_name="$(make -s image_name)"

  # sign boot image if the prequisites are available
  if [[ -f "$_mok_crt" ]] && [[ -f "$_mok_key" ]] && [[ -x "$(command -v sbsign)" ]]; then
    echo "Signing boot image..."
    sbsign --key "$_mok_key" --cert "$_mok_crt" --output "$image_name" "$image_name"
  fi

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$image_name" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)
  provides=("linux-headers=${_shortver}")

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
